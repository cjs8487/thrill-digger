{"version":3,"sources":["App.tsx","GridField.tsx","reportWebVitals.ts","index.tsx"],"names":["TestComp","props","state","nativeModule","currentMessage","solver","cellStates","bombPercentage","selectedType","HoleContent","Unspecified","ranking","boardHeight","boardWidth","selectedChanged","bind","then","native","setState","create_solver","setImmediate","console","log","cache_boards","get_height","get_width","newStates","Array","fill","map","this","free","index","selection","Error","set_hole","calculate_probabilities_with_pregenerated","forEach","cellState","get_probability","cellStatesWithIndex","filter","cs","fieldState","sort","a","b","className","_","y","x","bombProbability","selectedState","selectionChangedCallback","onClick","resetBoard","href","React","Component","App","holeStates","GreenRupee","BlueRupee","RedRupee","SilverRupee","GoldRupee","Rupoor","Bomb","goodnessInterpolation","interpolate","GridField","onSelectChange","event","parseInt","target","value","bgColor","NaN","style","backgroundColor","borderColor","toFixed","onChange","h","hc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.983ae626.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SolverWrapper } from \"./native/build\";\nimport { GridField, HoleContent } from \"./GridField\";\n\ntype FieldState = {\n  bombPercentage: number,\n  selectedType: HoleContent,\n  ranking: number,\n};\n\ntype AppState = {\n  nativeModule: any,\n  currentMessage: string,\n  solver: SolverWrapper | null,\n  cellStates: FieldState[],\n  boardWidth: number,\n  boardHeight: number,\n};\n\nclass TestComp extends React.Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n      currentMessage: \"waiting to initialize...\",\n      solver: null,\n      cellStates: [{bombPercentage: 0, selectedType: HoleContent.Unspecified, ranking: 100}],\n      boardHeight: 0,\n      boardWidth: 0,\n    };\n\n    this.selectedChanged = this.selectedChanged.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"./native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n        currentMessage: \"computing values...\",\n        solver: native.create_solver(2/* expert */),\n      });\n      setImmediate(() => {\n        console.log(\"setting state\");\n        // this takes a really long time\n        this.state.solver?.cache_boards();\n        const boardHeight = this.state.solver!.get_height();\n        const boardWidth = this.state.solver!.get_width();\n        const newStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n          return {\n            bombPercentage: 0,\n            selectedType: HoleContent.Unspecified,\n            ranking: 100,\n          }\n        });\n        this.setState({\n          currentMessage: \"done!\",\n          boardWidth,\n          boardHeight,\n          cellStates: newStates,\n        });\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.solver?.free();\n  }\n\n  selectedChanged(index: number, selection: HoleContent) {\n    const cellStates = this.state.cellStates;\n    cellStates[index].selectedType = selection;\n    if (this.state.solver === null) {\n      throw Error(\"solver is null!\");\n    }\n    const solver = this.state.solver;\n    solver.set_hole(index, selection);\n    solver.calculate_probabilities_with_pregenerated();\n    cellStates.forEach((cellState, index) => {\n      cellState.bombPercentage = solver.get_probability(index);\n    });\n    // figure out the best places for the ranking, don't include already placed\n    const cellStatesWithIndex: [number, FieldState][] = cellStates\n      .filter(cs => cs.selectedType === HoleContent.Unspecified)\n      .map((fieldState, index) => [index, fieldState]);\n    cellStatesWithIndex.sort((a,b) => a[1].bombPercentage - b[1].bombPercentage);\n    cellStatesWithIndex.forEach(([_, fieldState], index) => fieldState.ranking = index);\n    this.setState({\n      cellStates,\n    });\n  }\n\n  resetBoard() {\n    const boardHeight = this.state.solver?.get_height() || 0;\n    const boardWidth = this.state.solver?.get_width() || 0;\n    const cellStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n      return {\n        bombPercentage: 0,\n        selectedType: HoleContent.Unspecified,\n        ranking: 100,\n      }\n    });\n    this.setState({\n      cellStates,\n    });\n  }\n\n  render() {\n    const {boardHeight, boardWidth, cellStates, currentMessage} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Thrill Digger Expert solver</h1>\n        <div>{currentMessage}</div>\n        <table>\n          <tbody>\n            {\n              Array(boardHeight).fill(0).map((_, y) => {\n                return (<tr>\n                  {\n                    Array(boardWidth).fill(0).map((_, x) => {\n                      const index = y * boardWidth + x;\n                      const cellState = cellStates[index];\n                      return (<td><GridField\n                        key={index}\n                        bombProbability={cellState.bombPercentage}\n                        selectedState={cellState.selectedType}\n                        index={index}\n                        selectionChangedCallback={this.selectedChanged}\n                        ranking={cellState.ranking}></GridField></td>)\n                    })\n                  }\n                </tr>)\n              })\n            }\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard.bind(this)}>Reset</button>\n        <div>Source code: <a href=\"https://github.com/lepelog/thrill-digger\">GitHub</a></div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <TestComp/>\n  );\n}\n\nexport default App;\n","import React, { ChangeEvent } from 'react';\nimport interpolate from \"color-interpolate\";\nimport \"./GridField.css\";\n\nexport enum HoleContent {\n  Unspecified = 0,\n  GreenRupee = 1,\n  BlueRupee = 2,\n  RedRupee = 3,\n  SilverRupee = 4,\n  GoldRupee = 5,\n  Rupoor = 6,\n  Bomb = 7,\n};\n\nfunction holeContentToStr(hc: HoleContent): string {\n  return HoleContent[hc];\n}\n\ntype GridFieldProps = {\n    bombProbability: number,\n    selectedState: HoleContent,\n    index: number,\n    selectionChangedCallback: (index: number, newSelected: HoleContent) => void,\n    ranking: number,\n}\n\nconst holeStates = [\n  HoleContent.Unspecified,\n  HoleContent.GreenRupee,\n  HoleContent.BlueRupee,\n  HoleContent.RedRupee,\n  HoleContent.SilverRupee,\n  HoleContent.GoldRupee,\n  HoleContent.Rupoor,\n  HoleContent.Bomb,\n];\n\nconst goodnessInterpolation = interpolate(['#2de500', '#e5d200', '#e50b00']);\n\nexport class GridField extends React.Component<GridFieldProps, {}> {\n    constructor(props: GridFieldProps) {\n        super(props);\n\n        this.onSelectChange = this.onSelectChange.bind(this);\n    }\n\n    onSelectChange(event: ChangeEvent<HTMLSelectElement>) {\n        this.props.selectionChangedCallback(this.props.index, parseInt(event.target.value));\n    }\n\n    render() {\n      const {bombProbability, index, selectedState, ranking} = this.props;\n      const bgColor = goodnessInterpolation(bombProbability === NaN ? 0 : bombProbability);\n      return (\n        <div className=\"grid-field\" style={{backgroundColor: bgColor, borderColor: ranking < 3 ? \"#0011d3\": \"black\"}}>\n          <div>hole: {index}, probability: {(bombProbability * 100).toFixed(2)}%</div>\n          <div>\n            <select onChange={this.onSelectChange} value={selectedState}>\n                {holeStates.map(h => {\n                    return (<option key={h} value={h}>{holeContentToStr(h)}</option>);\n                })}\n            </select>\n          </div>\n        </div>\n      );\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}