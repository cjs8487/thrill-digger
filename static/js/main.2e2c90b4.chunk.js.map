{"version":3,"sources":["App.tsx","GridField.tsx","reportWebVitals.ts","index.tsx"],"names":["TestComp","props","state","nativeModule","currentMessage","solver","cellStates","bombPercentage","selectedType","HoleContent","Unspecified","ranking","boardHeight","boardWidth","selectedChanged","bind","then","native","setState","create_solver","setImmediate","console","log","cache_boards","get_height","get_width","newStates","Array","fill","map","updateBoardAndRecalculateProbs","this","free","Error","index","selection","getSolverOrError","set_hole","calculate_probabilities_with_pregenerated","forEach","cellState","get_probability","cellStatesWithIndex","filter","cs","fieldState","sort","a","b","i","className","_","y","x","bombProbability","selectedState","selectionChangedCallback","onClick","resetBoard","href","React","Component","App","holeStates","GreenRupee","BlueRupee","RedRupee","SilverRupee","GoldRupee","Rupoor","Bomb","goodnessInterpolation","interpolate","GridField","onSelectChange","event","parseInt","target","value","bgColor","isFinite","style","backgroundColor","borderColor","toFixed","onChange","h","hc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e2c90b4.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { SolverWrapper } from \"./native/build\";\nimport { GridField, HoleContent } from \"./GridField\";\n\ntype FieldState = {\n  bombPercentage: number,\n  selectedType: HoleContent,\n  ranking: number,\n};\n\ntype AppState = {\n  nativeModule: any,\n  currentMessage: string,\n  solver: SolverWrapper | null,\n  cellStates: FieldState[],\n  boardWidth: number,\n  boardHeight: number,\n};\n\nclass TestComp extends React.Component<{}, AppState> {\n  constructor(props: AppState) {\n    super(props);\n\n    this.state = {\n      nativeModule: null,\n      currentMessage: \"waiting to initialize...\",\n      solver: null,\n      cellStates: [{bombPercentage: 0, selectedType: HoleContent.Unspecified, ranking: 100}],\n      boardHeight: 0,\n      boardWidth: 0,\n    };\n\n    this.selectedChanged = this.selectedChanged.bind(this);\n  }\n\n  componentDidMount() {\n    import(\"./native/build\").then(native => {\n      this.setState({\n        nativeModule: native,\n        currentMessage: \"computing values...\",\n        solver: native.create_solver(2/* expert */),\n      });\n      setImmediate(() => {\n        console.log(\"setting state\");\n        // this takes a really long time\n        this.state.solver?.cache_boards();\n        const boardHeight = this.state.solver!.get_height();\n        const boardWidth = this.state.solver!.get_width();\n        const newStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n          return {\n            bombPercentage: 0,\n            selectedType: HoleContent.Unspecified,\n            ranking: 100,\n          }\n        });\n        this.setState({\n          currentMessage: \"done!\",\n          boardWidth,\n          boardHeight,\n          cellStates: newStates,\n        });\n        this.updateBoardAndRecalculateProbs(newStates);\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.solver?.free();\n  }\n\n  getSolverOrError(): SolverWrapper {\n    if (this.state.solver === null) {\n      throw Error(\"solver is null!\");\n    }\n    return this.state.solver;\n  }\n\n  selectedChanged(index: number, selection: HoleContent) {\n    const cellStates = this.state.cellStates;\n    cellStates[index].selectedType = selection;\n    const solver = this.getSolverOrError();\n    solver.set_hole(index, selection);\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  // calculate the new probabilites and sets the cellStates to the state at the end\n  updateBoardAndRecalculateProbs(cellStates: FieldState[]) {\n    const solver = this.getSolverOrError();\n    solver.calculate_probabilities_with_pregenerated();\n    cellStates.forEach((cellState, index) => {\n      cellState.bombPercentage = solver.get_probability(index);\n    });\n    // figure out the best places for the ranking, don't include already placed\n    const cellStatesWithIndex: [number, FieldState][] = cellStates\n      .filter(cs => cs.selectedType === HoleContent.Unspecified)\n      .map((fieldState, index) => [index, fieldState]);\n    cellStatesWithIndex.sort((a,b) => a[1].bombPercentage - b[1].bombPercentage);\n    cellStatesWithIndex.forEach(([_, fieldState], index) => fieldState.ranking = index);\n    // make all cells, that are already dug up have no ranking\n    cellStates.forEach(cs => {\n      if (cs.selectedType !== HoleContent.Unspecified) {\n        cs.ranking = 100;\n      }\n    });\n    this.setState({\n      cellStates,\n    });\n  }\n\n  resetBoard() {\n    const boardHeight = this.state.solver?.get_height() || 0;\n    const boardWidth = this.state.solver?.get_width() || 0;\n    const cellStates = Array(boardHeight * boardWidth).fill(0).map(() => {\n      return {\n        bombPercentage: 0,\n        selectedType: HoleContent.Unspecified,\n        ranking: 100,\n      }\n    });\n    const solver = this.getSolverOrError();\n    for (let i = 0;i < boardHeight * boardWidth;i++) {\n      solver.set_hole(i, HoleContent.Unspecified);\n    }\n    this.updateBoardAndRecalculateProbs(cellStates);\n  }\n\n  render() {\n    const {boardHeight, boardWidth, cellStates, currentMessage} = this.state;\n    return (\n      <div className=\"App\">\n      <h1>Thrill Digger Expert solver</h1>\n        <div>{currentMessage}</div>\n        <table>\n          <tbody>\n            {\n              Array(boardHeight).fill(0).map((_, y) => {\n                return (<tr>\n                  {\n                    Array(boardWidth).fill(0).map((_, x) => {\n                      const index = y * boardWidth + x;\n                      const cellState = cellStates[index];\n                      return (<td><GridField\n                        key={index}\n                        bombProbability={cellState.bombPercentage}\n                        selectedState={cellState.selectedType}\n                        index={index}\n                        selectionChangedCallback={this.selectedChanged}\n                        ranking={cellState.ranking}></GridField></td>)\n                    })\n                  }\n                </tr>)\n              })\n            }\n          </tbody>\n        </table>\n        <button onClick={this.resetBoard.bind(this)}>Reset</button>\n        <div>Source code: <a href=\"https://github.com/lepelog/thrill-digger\">GitHub</a></div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return (\n    <TestComp/>\n  );\n}\n\nexport default App;\n","import React, { ChangeEvent } from 'react';\nimport interpolate from \"color-interpolate\";\nimport \"./GridField.css\";\n\nexport enum HoleContent {\n  Unspecified = 0,\n  GreenRupee = 1,\n  BlueRupee = 2,\n  RedRupee = 3,\n  SilverRupee = 4,\n  GoldRupee = 5,\n  Rupoor = 6,\n  Bomb = 7,\n};\n\nfunction holeContentToStr(hc: HoleContent): string {\n  return HoleContent[hc];\n}\n\ntype GridFieldProps = {\n    bombProbability: number,\n    selectedState: HoleContent,\n    index: number,\n    selectionChangedCallback: (index: number, newSelected: HoleContent) => void,\n    ranking: number,\n}\n\nconst holeStates = [\n  HoleContent.Unspecified,\n  HoleContent.GreenRupee,\n  HoleContent.BlueRupee,\n  HoleContent.RedRupee,\n  HoleContent.SilverRupee,\n  HoleContent.GoldRupee,\n  HoleContent.Rupoor,\n  HoleContent.Bomb,\n];\n\nconst goodnessInterpolation = interpolate(['#2de500', '#e5d200', '#e50b00']);\n\nexport class GridField extends React.Component<GridFieldProps, {}> {\n    constructor(props: GridFieldProps) {\n        super(props);\n\n        this.onSelectChange = this.onSelectChange.bind(this);\n    }\n\n    onSelectChange(event: ChangeEvent<HTMLSelectElement>) {\n        this.props.selectionChangedCallback(this.props.index, parseInt(event.target.value));\n    }\n\n    render() {\n      const {bombProbability, index, selectedState, ranking} = this.props;\n      const bgColor = selectedState === HoleContent.Unspecified ? goodnessInterpolation(isFinite(bombProbability) ? bombProbability : 0) : \"unset\";\n      return (\n        <div className=\"grid-field\" style={{backgroundColor: bgColor, borderColor: ranking < 3 ? \"#0011d3\": \"black\"}}>\n          <div>hole: {index}, probability: {(bombProbability * 100).toFixed(2)}%</div>\n          <div>\n            <select onChange={this.onSelectChange} value={selectedState}>\n                {holeStates.map(h => {\n                    return (<option key={h} value={h}>{holeContentToStr(h)}</option>);\n                })}\n            </select>\n          </div>\n        </div>\n      );\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}